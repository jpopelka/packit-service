---
# This file is the entrypoint to deploy packit-service to an openshift cluster (e.g. in Zuul)
- name: Deploy dev version of packit-service into zuul.
  hosts: all
  vars:
    deployment_dir: "{{ ansible_user_dir }}/{{ zuul.projects['github.com/packit-service/deployment'].src_dir }}"
    as_root: true # needs to run as root in zuul
  tasks:
    - name: clone deployment repo when not running in zuul
      block:
        - set_fact: deployment_dir=/tmp/deployment
        - set_fact: as_root=false
        - name: clone deployment repository (templates are there)
          git:
            repo: "https://github.com/packit-service/deployment.git"
            dest: "{{ deployment_dir }}"
            clone: yes
      when: zuul is not defined

    - name: Install packages for deployment
      dnf:
        name:
          - ansible
          - python3-openshift
          - make
          - skopeo
          - podman
      become: true
    - name: get token
      command: oc whoami -t
      register: kubeconfig_token
      become: "{{ as_root }}"

    # path_to_secrets = this is what we get from the outside
    # internal_secrets_path = this is what we'll use here
    - set_fact: internal_secrets_path={{ deployment_dir }}/secrets/dev
    - name: Create the directory secrets/
      file:
        path: "{{ deployment_dir }}/secrets/"
        state: directory
    - name: Prepare secrets
      when: path_to_secrets is not defined
      block:
        - name: Create {{ internal_secrets_path }}
          file:
            path: "{{ internal_secrets_path }}"
            state: directory
        - name: Generate dummy keys
          command: "openssl genrsa -out {{ internal_secrets_path }}/{{ item }} 4096"
          with_items:
            - private-key.pem
            - privkey.pem
            - dashboard-privkey.pem
            - centos-server-ca.cert
            - centos.cert
        - name: Generate dummy certs
          command: "openssl req -x509 -new -key {{ internal_secrets_path }}/{{ item.key }} -out {{ internal_secrets_path }}/{{ item.out }} -days 1 -subj '/CN=just.for.the.ci' -passin pass:somepassword -passout pass:anotherpassword -nodes"
          with_items:
            - { key: privkey.pem, out: fullchain.pem }
            - { key: dashboard-privkey.pem, out: dashboard-fullchain.pem }

        - name: Generate /etc/ssh/ RSA host key
          command: "ssh-keygen -q -t rsa -f {{ internal_secrets_path }}/id_rsa -C '' -N ''"
          args:
            creates: "{{ internal_secrets_path }}/id_rsa"
        # Ansible 2.8+, does not work in Zuul (???)
        #  - name: Generate an OpenSSH keypair with the default values (4096 bits, rsa)
        #    openssh_keypair:
        #      path: "{{ deployment_dir }}/secrets/dev/id_rsa"

        - name: Create fedora.keytab
          file:
            path: "{{ internal_secrets_path }}/fedora.keytab"
            state: touch

        - name: Create sentry_key
          file:
            path: "{{ internal_secrets_path }}/sentry_key"
            state: touch

        - name: Copy the rest of the secrets from template
          copy:
            src: "{{ deployment_dir }}/secrets/template/{{ item }}"
            dest: "{{ internal_secrets_path }}/{{ item }}"
            remote_src: yes
          with_items:
            - packit-service.yaml
            - copr
            - ssh_config
            - fedora.toml
            - extra-vars.yml
    # end of the block

    - name: symlink secrets when provided
      when: path_to_secrets is defined
      file:
        state: link
        src: "{{ path_to_secrets }}/dev"
        dest: "{{ internal_secrets_path }}"

    - name: Create dev.yml
      copy:
        content: |
          # this file is described here: https://github.com/packit-service/deployment/blob/master/vars/template.yml
          project: myproject
          host: https://127.0.0.1:8443
          api_key: {{ kubeconfig_token.stdout }}
          # To work-around 'SSL: CERTIFICATE_VERIFY_FAILED'
          validate_certs: no
          # we don't need these services while testing p-s now
          without_fedmsg: true
          without_redis_commander: true
          without_flower: true
          without_dashboard: true
          sandbox_namespace: packit-dev-sandbox
          worker_replicas: 1
        dest: "{{ deployment_dir }}/vars/dev.yml"
    - name: Actually deploy
      command: make deploy
      environment:
        DEPLOYMENT: dev
        ANSIBLE_STDOUT_CALLBACK: debug
      args:
        chdir: "{{ deployment_dir }}"
      become: "{{ as_root }}"
